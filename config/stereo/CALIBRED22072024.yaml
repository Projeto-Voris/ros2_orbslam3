%YAML:1.0

#--------------------------------------------------------------------------------------------
# System config
#--------------------------------------------------------------------------------------------

# When the variables are commented, the system doesn't load a previous session or not store the current one

# If the LoadFile doesn't exist, the system give a message and create a new Atlas from scratch
#System.LoadAtlasFromFile: "Session_MH01_MH02_MH03_Stereo60_Pseudo"

# The store file is created from the current session, if a file with the same name exists it is deleted
#System.SaveAtlasToFile: "Session_MH01_MH02_MH03_Stereo60_Pseudo"

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------

File.version: "1.0"
#obrigatorio especifica que é o novo formato de calibração usados

Camera.type: "PinHole"
#ESPECIFICA O TIPO DE CAMERA USADO podendo receber AS  TRES SEGUINTES ENTRADAS:
#
#"PinHole" = cameras pinhole
#
#"KannalaBrandt8" = Utilizar quando usar a olho de peixe utilizando calibração Kannala-Brandt como modelo de de calobração
#
#"Rectified" = pinhole retificada busca remover distorção de lente
#

# Camera calibration and distortion parameters (OpenCV) 
#Camera 1 = esquerda   Camera 2 = direitra caso de uso em sistemamonocular utilizar apenas camera 1
Camera1.fx: 403.5694
Camera1.fy: 403.3380
#FOCAL LEATE
Camera1.cx: 385.1370
Camera1.cy: 300.1828
#Principal point

#Camera1.k1: 0.0
#Camera1.k2: 0.0
#Camera1.k3: 0.0

Camera1.k1: -0.0374
Camera1.k2: 0.0861
Camera1.k3: -0.0425
#Camera1.k4: (FLOAT)
#Distorção radial sendo K3 opicional e k4 aapenas em Kannala-brandt (olho de peixe)
Camera1.p1: 0.0015
Camera1.p2: -0.0029

#Camera1.p1: 0.0013
#Camera1.p2: -0.0025
#distorção tangencial

Camera2.fx: 401.3769
Camera2.fy: 401.2754
#FOCAL LENGTH
Camera2.cx: 385.6524
Camera2.cy: 302.9431
#principal Poijnt

#Camera2.k1: 0.0
#Camera2.k2: 0.00
#Camera2.k3: 0.0

Camera2.k1: -0.0328
Camera2.k2: 0.0784
Camera2.k3: -0.0377
#Camera1.k4: (FLOAT)
#Distorção radial sendo K3 opicional e k4 aapenas em Kannala-brandt (olho de peixe)
Camera2.p1: 0.0014
Camera2.p2: -0.0034

#Camera2.p1: 0.0014
#Camera2.p2: -0.0028
#distorção rangencial

Camera.width: 800
Camera.height: 600
#Camera.width e Camera.height tamanho da imagem que será recebida

#Camera.newWidth: 800
#Camera.newHeight: 600
#opcional rescala a imagem e segundo ele recomputa os parametros de calibração.

# Camera frames per second 
Camera.fps: 30

# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
Camera.RGB: 1

#System.thFarPoints: 30.0
#Valor opcional colocar valor em metros da um valor maximo de profundidade permitido aos pontos.

Stereo.ThDepth: 8.0
#quantas vezes a  baseline da camera que usamos deve ser usada pra distancia no caso seria distancia que queremos *baseline

#em caso de uso de um sistema retificado usar:
#Stereo.b: (FLOAT)que é a baselione em metros
#Distamcia  entra duas cameras = baseline

#em caso de  usar um sistema stereo não retificado:
Stereo.T_c1_c2: !!opencv-matrix
  rows: 4
  cols: 4
  dt: f
  data: [1.0000, -0.0075, 0.0040,-100.2308e-3,
         0.0075,1.0000,-0.0059, 0.5024e-3,
         -0.0040,0.0059 , 1.0000, 0.7983e-3,
         0,0,0,1.000000000000000]

#primeiros valores são d ametriz e a ultima coluna translação da camera

#Em caso de uso de um sistema de olho de peixe usar as seguintes variaveis
#Camera1.overlappingBegin:(int) 
#Camera2.overlappingBegin:(int)
#Coluna inicial do overlap
#Camera1.overlappingEnd:(int)
#Camera2.overlappingEnd:(int)
#coluna final do oberlap

#em caso de cameras que possuam IMU usar:

#IMU.NoiseGyro:  (FLOAT)
#densidade de ruido do giroscopio

#IMU.NoiseAcc:  (FLOAT)
#Densidade de ruido do acelerrometro

#IMU.GyroWalk:  (FLOAT)
#Variação de passo aleatorio do giroscopio

#IMU.AccWalk:  (FLOAT)
#Variação de passo aleatorio do acelerometro

#IMU.Frequency:  (FLOAT)
#frequencia do IMU

#IMU.T_b_c1:  (cv::Mat)
#Posição relativa entre IMU e camera 1

#IMU.InsertKFsWhenLost:  (int)(opcional)
#especifica se o sistema quando o sistema se  perde e o sistema inercial não

#em casos de cameras coloridas:
#RGBD.DepthMapFactor: (float) 
#fator de transformação domapade profundidade

#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 1500
#numero de caracteristicas a serem estradidas

# ORB Extractor: Scale factor between levels in the scale pyramid 	
ORBextractor.scaleFactor: 1.2

# ORB Extractor: Number of levels in the scale pyramid	
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast			
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 6

#--------------------------------------------------------------------------------------------
# Viewer Parameters
#--------------------------------------------------------------------------------------------
Viewer.KeyFrameSize: 0.05
#tamanho do keyframe no mapa do visualisador
Viewer.KeyFrameLineWidth: 1.0
#Espeçura da linha do keyframe
Viewer.GraphLineWidth: 0.9

Viewer.PointSize: 2.0
#tamanho no ponto do mapa
Viewer.CameraSize: 0.08
#tamanho da camera no mapa
Viewer.CameraLineWidth: 3.0
#largutra do desenho d acamera
Viewer.ViewpointX: 0.0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -1.8
Viewer.ViewpointF: 500.0
#ponto inicial do mapa
Viewer.imageViewScale: 1.0
#rescala no visualizaor do mapa (não interfere no SLAM)
